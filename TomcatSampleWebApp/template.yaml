AWSTemplateFormatVersion: 2010-09-09
Description: AppLB+ECS+1service+3task -- prototype

Parameters:
  EcrImageArn:
    Type: String
    Default: "715322001598.dkr.ecr.eu-central-1.amazonaws.com/samplewebapprepo:latest"

Resources:
    
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy' 
      Policies:
        - PolicyName: CustomECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:

                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'      

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CloudFormationSecurityGroupSampleWebApp"
      GroupDescription: "All traffic allowed"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway    

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetC
      RouteTableId: !Ref PublicRouteTable
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: CloudFormationClusterSampleWebApp
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  CloudWatchLogsGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/ecs/CFSampleWebApp
        RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: 256
      Memory: 0.5GB
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSTaskRole
      NetworkMode: awsvpc      
      Family: CloudFormationTaskDefinitionFamilySampleWebApp
      ContainerDefinitions:
        - Name: CloudFormationContainerImageSampleWebApp
          Image: !Ref EcrImageArn
          PortMappings:
          - ContainerPort: 8080
            HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: aws-cloudformation      
         
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: CloudFormationServiceSampleWebApp
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 3
      LoadBalancers:
        - ContainerName: CloudFormationContainerImageSampleWebApp
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: 
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC    
      TaskDefinition: !Ref TaskDefinition      

  ElasticApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: CloudFormationSampleWebAppLB
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: 
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CloudFormationSampleWebAppTG
      HealthCheckPath: "/"
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount : 2        
      Port: 8080
      Protocol: "HTTP"
      VpcId: !Ref VPC
      TargetType: "ip"
    DependsOn: ElasticApplicationLoadBalancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ElasticApplicationLoadBalancer
      Port: 8080
      Protocol: "HTTP"  

Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB to Tomcat 
    Value: !Sub 'http://${ElasticApplicationLoadBalancer.DNSName}:8080'
  
  
  
  
