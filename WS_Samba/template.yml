AWSTemplateFormatVersion: '2010-09-09'
Description: WorldServer infrastructure
  
Parameters:
  WorldServerCidrBlock:
    Type: String
    Default: "10.44.124.0/23"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: CIDR block for the WorldServer VPC

  DockerImage:
    Type: String
    Default: "dperson/samba"

Resources:
  WorldServerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: WorldServerCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: 'WorldServerVPC'
  
  WorldServerSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref WorldServerVPC
      CidrBlock:
        !Select [ 0, !Cidr [ !Ref WorldServerCidrBlock, 3, 7 ]]
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: "Name"
          Value: !Sub "WorldServerSubnet1"

  WorldServerSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref WorldServerVPC
      CidrBlock:
        !Select [ 1, !Cidr [ !Ref WorldServerCidrBlock, 3, 7 ]]
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: "Name"
          Value: !Sub "WorldServerSubnet2"

  WorldServerFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref WorldServerVPC
      GroupName: "WorldServerFSSecurityGroup"
      GroupDescription: "Security group controlling the inbound traffic to the WorldServer FileSystem"
      SecurityGroupIngress:
        - FromPort: "0"
          ToPort: "0"
          IpProtocol: "-1"
          CidrIp: !Ref WorldServerCidrBlock 
  
  WorldServerInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: WorldServerVPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WorldServerVPC
      InternetGatewayId: !Ref WorldServerInternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorldServerVPC

  PublicRoute1: 
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WorldServerInternetGateway 
  
  WorldServerSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WorldServerSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  WorldServerSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WorldServerSubnet2
      RouteTableId: !Ref PublicRouteTable

  SmbCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: SmbCluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  CloudWatchLogsGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/ecs/SmbCluster
        RetentionInDays: 7

  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
  
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        !Ref EFS
      SubnetId:
        !Ref WorldServerSubnet1
      SecurityGroups:
      - !Ref WorldServerFSSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        !Ref EFS
      SubnetId:
        !Ref WorldServerSubnet2
      SecurityGroups:
      - !Ref WorldServerFSSecurityGroup           

  # TaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     RequiresCompatibilities:
  #       - "FARGATE"
  #     Cpu: 256
  #     Memory: 0.5GB
  #     TaskRoleArn: "arn:aws:iam::770725503646:role/iap-app-stack-IapApp-1VEI8U8OS1RTW-TaskAPIRole-4XGA3RKD6A5S"
  #     ExecutionRoleArn: "arn:aws:iam::770725503646:role/iap-app-stack-IapApp-1VEI8U8OS1RTW-TaskAPIRole-4XGA3RKD6A5S"
  #     NetworkMode: awsvpc      
  #     ContainerDefinitions:
  #       - Name: SambaImage
  #         Image: !Ref DockerImage
  #         EntryPoint :
  #           - "sh"
  #           - "-c"
  #         Command:
  #           # - "sudo mkdir /efs"
  #           # - "/bin/sh -c \"ls -al /mnt/efs\""
  #           - "/bin/sh -c \"echo Ciao\""  
  #           # - !Sub "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS}.efs.eu-central-1.amazonaws.com:/ /efs"
  #           # - "sudo touch /efs/ciao.txt"
  #           # - "/bin/sh samba.sh -u \"ec2-user;password\" -s \"shared_x;/efs;yes;no;yes;ec2-user\""
  #         PortMappings:
  #           - ContainerPort: 139
  #             HostPort: 139
  #           - ContainerPort: 445
  #             HostPort: 445  
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref CloudWatchLogsGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: aws-samba

  CustomTaskDefinition:
    Type: 'Custom::TaskDefinition'
    Version: '1.0'
    Properties: 
      ServiceToken: !GetAtt 'CustomResourceFunction.Arn'
      TaskDefinition: {
        containerDefinitions: [
          {
            name: "samba",
            image: !Ref DockerImage,
            logConfiguration: {
              logDriver: "awslogs",
              options: {
                awslogs-group: !Ref CloudWatchLogsGroup,
                awslogs-region: "eu-central-1",
                awslogs-stream-prefix: aws-samba
              }
            },
            portMappings: [
              {
                containerPort: 445,
                hostPort: 445,
                protocol: tcp
              }
            ],
            entryPoint: ["sh", "-c"],
            command: ["/bin/bash /usr/bin/samba.sh -u \"ec2-user;password\" -s \"shared_x;/efs;yes;no;yes;ec2-user\""],  
            mountPoints: [
              {sourceVolume: "efs", containerPath: "/efs"}
            ]
          }
        ], 
        family: "samba",
        taskRoleArn: "arn:aws:iam::770725503646:role/smb-app-role", # required for EFS permissions
        executionRoleArn: "arn:aws:iam::770725503646:role/smb-app-role", # required for EFS permissions
        cpu: "256",
        memory: "512",
        requiresCompatibilities: [FARGATE], 
        networkMode: "awsvpc",
        volumes: [
          {
            name: "efs",
            efsVolumeConfiguration: {
              fileSystemId: !Ref EFS
            }
          }
        ]
      }
  CustomResourceFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk')
          const response = require('cfn-response')
          const ecs = new aws.ECS({apiVersion: '2014-11-13'})
          exports.handler = function(event, context) {
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              ecs.registerTaskDefinition(event.ResourceProperties.TaskDefinition, function(err, data) {
                if (err) {
                  console.error(err);
                  response.send(event, context, response.FAILED)
                } else {
                  console.log(`Created/Updated task definition ${data.taskDefinition.taskDefinitionArn}`)
                  response.send(event, context, response.SUCCESS, {}, data.taskDefinition.taskDefinitionArn)
                }
              })
            } else if (event.RequestType === 'Delete') {
              ecs.deregisterTaskDefinition({taskDefinition: event.PhysicalResourceId}, function(err) {
                if (err) {
                  console.error(err);
                  response.send(event, context, response.FAILED)
                } else {
                  console.log(`Removed task definition ${event.PhysicalResourceId}`)
                  response.send(event, context, response.SUCCESS)
                }
              })
            } else {
              console.error(`Unsupported request type: ${event.RequestType}`)
              response.send(event, context, response.FAILED)
            }
          }
      Handler: 'index.handler'
      MemorySize: 512
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: 'nodejs10.x'
      Timeout: 30
  CustomResourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ws-app-ecs
      PermissionsBoundary:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:policy/WIPO-PermissionsBoundary
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'customresource'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DeregisterTaskDefinition'
            - 'ecs:RegisterTaskDefinition'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'iam:GetRole'
            - 'iam:PassRole'
            Resource: '*'  

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: SmbService
      LaunchType: FARGATE
      PlatformVersion: '1.4.0'
      Cluster: !Ref SmbCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 0
      LoadBalancers:
        - ContainerName: samba
          ContainerPort: 445
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref WorldServerFSSecurityGroup
          Subnets: 
            - !Ref WorldServerSubnet1
            - !Ref WorldServerSubnet2
      TaskDefinition: !Ref CustomTaskDefinition      

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: samba-nlb
      Type: network
      Subnets: 
        - !Ref WorldServerSubnet1
        - !Ref WorldServerSubnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: NetworkLoadBalancer
    Properties:
      Name: samba-nlb-target      
      Port: 445
      Protocol: "TCP"
      VpcId: !Ref WorldServerVPC
      TargetType: "ip"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 445
      Protocol: "TCP"      